//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MockTransitClient.FaultServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerReport", Namespace="http://schemas.datacontract.org/2004/07/FaultReportServer")]
    [System.SerializableAttribute()]
    public partial class CustomerReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReportTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripton {
            get {
                return this.DescriptonField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptonField, value) != true)) {
                    this.DescriptonField = value;
                    this.RaisePropertyChanged("Descripton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectIDField, value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReportTime {
            get {
                return this.ReportTimeField;
            }
            set {
                if ((this.ReportTimeField.Equals(value) != true)) {
                    this.ReportTimeField = value;
                    this.RaisePropertyChanged("ReportTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FaultServices.IFaultReportContract")]
    public interface IFaultReportContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultReportContract/AutoFaultReport", ReplyAction="http://tempuri.org/IFaultReportContract/AutoFaultReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IFaultReportContract/AutoFaultReportArgumentNullExceptionFault" +
            "", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        int AutoFaultReport(string InstrumentUID, string FaultCode, string FaultDetail, System.DateTime FaultTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultReportContract/SendAttachedFile", ReplyAction="http://tempuri.org/IFaultReportContract/SendAttachedFileResponse")]
        void SendAttachedFile(string InstrumentID, int FixEventID, byte[] AttachedFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultReportContract/ManualFaultReport", ReplyAction="http://tempuri.org/IFaultReportContract/ManualFaultReportResponse")]
        bool ManualFaultReport(MockTransitClient.FaultServices.CustomerReport Report);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFaultReportContract/TellNetStatus", ReplyAction="http://tempuri.org/IFaultReportContract/TellNetStatusResponse")]
        void TellNetStatus(string InstrumentUID, bool IsOnline);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFaultReportContractChannel : MockTransitClient.FaultServices.IFaultReportContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FaultReportContractClient : System.ServiceModel.ClientBase<MockTransitClient.FaultServices.IFaultReportContract>, MockTransitClient.FaultServices.IFaultReportContract {
        
        public FaultReportContractClient() {
        }
        
        public FaultReportContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FaultReportContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaultReportContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FaultReportContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AutoFaultReport(string InstrumentUID, string FaultCode, string FaultDetail, System.DateTime FaultTime) {
            return base.Channel.AutoFaultReport(InstrumentUID, FaultCode, FaultDetail, FaultTime);
        }
        
        public void SendAttachedFile(string InstrumentID, int FixEventID, byte[] AttachedFile) {
            base.Channel.SendAttachedFile(InstrumentID, FixEventID, AttachedFile);
        }
        
        public bool ManualFaultReport(MockTransitClient.FaultServices.CustomerReport Report) {
            return base.Channel.ManualFaultReport(Report);
        }
        
        public void TellNetStatus(string InstrumentUID, bool IsOnline) {
            base.Channel.TellNetStatus(InstrumentUID, IsOnline);
        }
    }
}
