#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HostTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AssDB")]
	public partial class FaultDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCustomerReportFault(CustomerReportFault instance);
    partial void UpdateCustomerReportFault(CustomerReportFault instance);
    partial void DeleteCustomerReportFault(CustomerReportFault instance);
    partial void InsertTransitServer(TransitServer instance);
    partial void UpdateTransitServer(TransitServer instance);
    partial void DeleteTransitServer(TransitServer instance);
    partial void InsertDeliveryStatus(DeliveryStatus instance);
    partial void UpdateDeliveryStatus(DeliveryStatus instance);
    partial void DeleteDeliveryStatus(DeliveryStatus instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDispatchDelay(DispatchDelay instance);
    partial void UpdateDispatchDelay(DispatchDelay instance);
    partial void DeleteDispatchDelay(DispatchDelay instance);
    partial void InsertDispatchMission(DispatchMission instance);
    partial void UpdateDispatchMission(DispatchMission instance);
    partial void DeleteDispatchMission(DispatchMission instance);
    partial void InsertDuty(Duty instance);
    partial void UpdateDuty(Duty instance);
    partial void DeleteDuty(Duty instance);
    partial void InsertFaultType(FaultType instance);
    partial void UpdateFaultType(FaultType instance);
    partial void DeleteFaultType(FaultType instance);
    partial void InsertFinishDelay(FinishDelay instance);
    partial void UpdateFinishDelay(FinishDelay instance);
    partial void DeleteFinishDelay(FinishDelay instance);
    partial void InsertFixEvent(FixEvent instance);
    partial void UpdateFixEvent(FixEvent instance);
    partial void DeleteFixEvent(FixEvent instance);
    partial void InsertFixStatus(FixStatus instance);
    partial void UpdateFixStatus(FixStatus instance);
    partial void DeleteFixStatus(FixStatus instance);
    partial void InsertInstrument(Instrument instance);
    partial void UpdateInstrument(Instrument instance);
    partial void DeleteInstrument(Instrument instance);
    partial void InsertInstrumentStatusHistory(InstrumentStatusHistory instance);
    partial void UpdateInstrumentStatusHistory(InstrumentStatusHistory instance);
    partial void DeleteInstrumentStatusHistory(InstrumentStatusHistory instance);
    partial void InsertInstrumentType(InstrumentType instance);
    partial void UpdateInstrumentType(InstrumentType instance);
    partial void DeleteInstrumentType(InstrumentType instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffDuty(StaffDuty instance);
    partial void UpdateStaffDuty(StaffDuty instance);
    partial void DeleteStaffDuty(StaffDuty instance);
    partial void InsertEventAttachedFile(EventAttachedFile instance);
    partial void UpdateEventAttachedFile(EventAttachedFile instance);
    partial void DeleteEventAttachedFile(EventAttachedFile instance);
    #endregion
		
		public FaultDataContext() : 
				base(global::HostTest.Properties.Settings.Default.AssDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FaultDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FaultDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CustomerReportFault> CustomerReportFault
		{
			get
			{
				return this.GetTable<CustomerReportFault>();
			}
		}
		
		public System.Data.Linq.Table<TransitServer> TransitServer
		{
			get
			{
				return this.GetTable<TransitServer>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryStatus> DeliveryStatus
		{
			get
			{
				return this.GetTable<DeliveryStatus>();
			}
		}
		
		public System.Data.Linq.Table<Department> Department
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<DispatchDelay> DispatchDelay
		{
			get
			{
				return this.GetTable<DispatchDelay>();
			}
		}
		
		public System.Data.Linq.Table<DispatchMission> DispatchMission
		{
			get
			{
				return this.GetTable<DispatchMission>();
			}
		}
		
		public System.Data.Linq.Table<Duty> Duty
		{
			get
			{
				return this.GetTable<Duty>();
			}
		}
		
		public System.Data.Linq.Table<FaultType> FaultType
		{
			get
			{
				return this.GetTable<FaultType>();
			}
		}
		
		public System.Data.Linq.Table<FinishDelay> FinishDelay
		{
			get
			{
				return this.GetTable<FinishDelay>();
			}
		}
		
		public System.Data.Linq.Table<FixEvent> FixEvent
		{
			get
			{
				return this.GetTable<FixEvent>();
			}
		}
		
		public System.Data.Linq.Table<FixStatus> FixStatus
		{
			get
			{
				return this.GetTable<FixStatus>();
			}
		}
		
		public System.Data.Linq.Table<Instrument> Instrument
		{
			get
			{
				return this.GetTable<Instrument>();
			}
		}
		
		public System.Data.Linq.Table<InstrumentStatusHistory> InstrumentStatusHistory
		{
			get
			{
				return this.GetTable<InstrumentStatusHistory>();
			}
		}
		
		public System.Data.Linq.Table<InstrumentType> InstrumentType
		{
			get
			{
				return this.GetTable<InstrumentType>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staff
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffDuty> StaffDuty
		{
			get
			{
				return this.GetTable<StaffDuty>();
			}
		}
		
		public System.Data.Linq.Table<EventAttachedFile> EventAttachedFile
		{
			get
			{
				return this.GetTable<EventAttachedFile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerReportFault")]
	public partial class CustomerReportFault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ProjectID;
		
		private string _ReportTime;
		
		private string _Description;
		
		private string _MappedFaultType;
		
		private string _ProjectName;
		
		private EntityRef<FaultType> _FaultType;
		
		private EntityRef<Project> _Project;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    partial void OnReportTimeChanging(string value);
    partial void OnReportTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMappedFaultTypeChanging(string value);
    partial void OnMappedFaultTypeChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    #endregion
		
		public CustomerReportFault()
		{
			this._FaultType = default(EntityRef<FaultType>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="NVarChar(20)")]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTime", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ReportTime
		{
			get
			{
				return this._ReportTime;
			}
			set
			{
				if ((this._ReportTime != value))
				{
					this.OnReportTimeChanging(value);
					this.SendPropertyChanging();
					this._ReportTime = value;
					this.SendPropertyChanged("ReportTime");
					this.OnReportTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappedFaultType", DbType="NVarChar(10)")]
		public string MappedFaultType
		{
			get
			{
				return this._MappedFaultType;
			}
			set
			{
				if ((this._MappedFaultType != value))
				{
					if (this._FaultType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMappedFaultTypeChanging(value);
					this.SendPropertyChanging();
					this._MappedFaultType = value;
					this.SendPropertyChanged("MappedFaultType");
					this.OnMappedFaultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(20)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FaultType_CustomerReportFault", Storage="_FaultType", ThisKey="MappedFaultType", OtherKey="FaultCode", IsForeignKey=true)]
		public FaultType FaultType
		{
			get
			{
				return this._FaultType.Entity;
			}
			set
			{
				FaultType previousValue = this._FaultType.Entity;
				if (((previousValue != value) 
							|| (this._FaultType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FaultType.Entity = null;
						previousValue.CustomerReportFault.Remove(this);
					}
					this._FaultType.Entity = value;
					if ((value != null))
					{
						value.CustomerReportFault.Add(this);
						this._MappedFaultType = value.FaultCode;
					}
					else
					{
						this._MappedFaultType = default(string);
					}
					this.SendPropertyChanged("FaultType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CustomerReportFault", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.CustomerReportFault.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.CustomerReportFault.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransitServer")]
	public partial class TransitServer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _Customer;
		
		private string _ProjectID;
		
		private int _ID;
		
		private EntityRef<Project> _Project;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public TransitServer()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(20)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="NVarChar(20)")]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TransitServer", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TransitServer.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TransitServer.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryStatus")]
	public partial class DeliveryStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Instrument> _Instrument;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DeliveryStatus()
		{
			this._Instrument = new EntitySet<Instrument>(new Action<Instrument>(this.attach_Instrument), new Action<Instrument>(this.detach_Instrument));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryStatus_Instrument", Storage="_Instrument", ThisKey="ID", OtherKey="DeliveryStatusID")]
		public EntitySet<Instrument> Instrument
		{
			get
			{
				return this._Instrument;
			}
			set
			{
				this._Instrument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryStatus = this;
		}
		
		private void detach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Staff> _Staff;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Staff = new EntitySet<Staff>(new Action<Staff>(this.attach_Staff), new Action<Staff>(this.detach_Staff));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Staff", ThisKey="ID", OtherKey="DepartmentID")]
		public EntitySet<Staff> Staff
		{
			get
			{
				return this._Staff;
			}
			set
			{
				this._Staff.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staff(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Staff(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DispatchDelay")]
	public partial class DispatchDelay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Level;
		
		private string _ResponsibleStaffID;
		
		private System.DateTime _DecisionTime;
		
		private System.DateTime _Deadline;
		
		private string _Reason;
		
		private int _FixEventID;
		
		private int _ID;
		
		private EntityRef<FixEvent> _FixEvent;
		
		private EntityRef<Staff> _Staff;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnResponsibleStaffIDChanging(string value);
    partial void OnResponsibleStaffIDChanged();
    partial void OnDecisionTimeChanging(System.DateTime value);
    partial void OnDecisionTimeChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnFixEventIDChanging(int value);
    partial void OnFixEventIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public DispatchDelay()
		{
			this._FixEvent = default(EntityRef<FixEvent>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleStaffID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ResponsibleStaffID
		{
			get
			{
				return this._ResponsibleStaffID;
			}
			set
			{
				if ((this._ResponsibleStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponsibleStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleStaffID = value;
					this.SendPropertyChanged("ResponsibleStaffID");
					this.OnResponsibleStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionTime", DbType="DateTime NOT NULL")]
		public System.DateTime DecisionTime
		{
			get
			{
				return this._DecisionTime;
			}
			set
			{
				if ((this._DecisionTime != value))
				{
					this.OnDecisionTimeChanging(value);
					this.SendPropertyChanging();
					this._DecisionTime = value;
					this.SendPropertyChanged("DecisionTime");
					this.OnDecisionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="DateTime NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixEventID", DbType="Int NOT NULL")]
		public int FixEventID
		{
			get
			{
				return this._FixEventID;
			}
			set
			{
				if ((this._FixEventID != value))
				{
					if (this._FixEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixEventIDChanging(value);
					this.SendPropertyChanging();
					this._FixEventID = value;
					this.SendPropertyChanged("FixEventID");
					this.OnFixEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_DispatchDelay", Storage="_FixEvent", ThisKey="FixEventID", OtherKey="ID", IsForeignKey=true)]
		public FixEvent FixEvent
		{
			get
			{
				return this._FixEvent.Entity;
			}
			set
			{
				FixEvent previousValue = this._FixEvent.Entity;
				if (((previousValue != value) 
							|| (this._FixEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixEvent.Entity = null;
						previousValue.DispatchDelay.Remove(this);
					}
					this._FixEvent.Entity = value;
					if ((value != null))
					{
						value.DispatchDelay.Add(this);
						this._FixEventID = value.ID;
					}
					else
					{
						this._FixEventID = default(int);
					}
					this.SendPropertyChanged("FixEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DispatchDelay", Storage="_Staff", ThisKey="ResponsibleStaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DispatchDelay.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DispatchDelay.Add(this);
						this._ResponsibleStaffID = value.ID;
					}
					else
					{
						this._ResponsibleStaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DispatchMission")]
	public partial class DispatchMission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DispatchedStaffID;
		
		private System.DateTime _DispatchTime;
		
		private string _Mission;
		
		private int _FixEventID;
		
		private int _ID;
		
		private EntityRef<FixEvent> _FixEvent;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDispatchedStaffIDChanging(string value);
    partial void OnDispatchedStaffIDChanged();
    partial void OnDispatchTimeChanging(System.DateTime value);
    partial void OnDispatchTimeChanged();
    partial void OnMissionChanging(string value);
    partial void OnMissionChanged();
    partial void OnFixEventIDChanging(int value);
    partial void OnFixEventIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public DispatchMission()
		{
			this._FixEvent = default(EntityRef<FixEvent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchedStaffID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DispatchedStaffID
		{
			get
			{
				return this._DispatchedStaffID;
			}
			set
			{
				if ((this._DispatchedStaffID != value))
				{
					this.OnDispatchedStaffIDChanging(value);
					this.SendPropertyChanging();
					this._DispatchedStaffID = value;
					this.SendPropertyChanged("DispatchedStaffID");
					this.OnDispatchedStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchTime", DbType="DateTime NOT NULL")]
		public System.DateTime DispatchTime
		{
			get
			{
				return this._DispatchTime;
			}
			set
			{
				if ((this._DispatchTime != value))
				{
					this.OnDispatchTimeChanging(value);
					this.SendPropertyChanging();
					this._DispatchTime = value;
					this.SendPropertyChanged("DispatchTime");
					this.OnDispatchTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mission", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Mission
		{
			get
			{
				return this._Mission;
			}
			set
			{
				if ((this._Mission != value))
				{
					this.OnMissionChanging(value);
					this.SendPropertyChanging();
					this._Mission = value;
					this.SendPropertyChanged("Mission");
					this.OnMissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixEventID", DbType="Int NOT NULL")]
		public int FixEventID
		{
			get
			{
				return this._FixEventID;
			}
			set
			{
				if ((this._FixEventID != value))
				{
					if (this._FixEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixEventIDChanging(value);
					this.SendPropertyChanging();
					this._FixEventID = value;
					this.SendPropertyChanged("FixEventID");
					this.OnFixEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_DispatchMission", Storage="_FixEvent", ThisKey="FixEventID", OtherKey="ID", IsForeignKey=true)]
		public FixEvent FixEvent
		{
			get
			{
				return this._FixEvent.Entity;
			}
			set
			{
				FixEvent previousValue = this._FixEvent.Entity;
				if (((previousValue != value) 
							|| (this._FixEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixEvent.Entity = null;
						previousValue.DispatchMission.Remove(this);
					}
					this._FixEvent.Entity = value;
					if ((value != null))
					{
						value.DispatchMission.Add(this);
						this._FixEventID = value.ID;
					}
					else
					{
						this._FixEventID = default(int);
					}
					this.SendPropertyChanged("FixEvent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Duty")]
	public partial class Duty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Describe;
		
		private EntitySet<StaffDuty> _StaffDuty;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescribeChanging(string value);
    partial void OnDescribeChanged();
    #endregion
		
		public Duty()
		{
			this._StaffDuty = new EntitySet<StaffDuty>(new Action<StaffDuty>(this.attach_StaffDuty), new Action<StaffDuty>(this.detach_StaffDuty));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="NVarChar(20)")]
		public string Describe
		{
			get
			{
				return this._Describe;
			}
			set
			{
				if ((this._Describe != value))
				{
					this.OnDescribeChanging(value);
					this.SendPropertyChanging();
					this._Describe = value;
					this.SendPropertyChanged("Describe");
					this.OnDescribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duty_StaffDuty", Storage="_StaffDuty", ThisKey="ID", OtherKey="DutyID")]
		public EntitySet<StaffDuty> StaffDuty
		{
			get
			{
				return this._StaffDuty;
			}
			set
			{
				this._StaffDuty.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Duty = this;
		}
		
		private void detach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Duty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FaultType")]
	public partial class FaultType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InstrumentTypeID;
		
		private string _Summary;
		
		private string _Detail;
		
		private string _FaultCode;
		
		private EntitySet<CustomerReportFault> _CustomerReportFault;
		
		private EntitySet<FixEvent> _FixEvent;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstrumentTypeIDChanging(int value);
    partial void OnInstrumentTypeIDChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnFaultCodeChanging(string value);
    partial void OnFaultCodeChanged();
    #endregion
		
		public FaultType()
		{
			this._CustomerReportFault = new EntitySet<CustomerReportFault>(new Action<CustomerReportFault>(this.attach_CustomerReportFault), new Action<CustomerReportFault>(this.detach_CustomerReportFault));
			this._FixEvent = new EntitySet<FixEvent>(new Action<FixEvent>(this.attach_FixEvent), new Action<FixEvent>(this.detach_FixEvent));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentTypeID", DbType="Int NOT NULL")]
		public int InstrumentTypeID
		{
			get
			{
				return this._InstrumentTypeID;
			}
			set
			{
				if ((this._InstrumentTypeID != value))
				{
					this.OnInstrumentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InstrumentTypeID = value;
					this.SendPropertyChanged("InstrumentTypeID");
					this.OnInstrumentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(200)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaultCode", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FaultCode
		{
			get
			{
				return this._FaultCode;
			}
			set
			{
				if ((this._FaultCode != value))
				{
					this.OnFaultCodeChanging(value);
					this.SendPropertyChanging();
					this._FaultCode = value;
					this.SendPropertyChanged("FaultCode");
					this.OnFaultCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FaultType_CustomerReportFault", Storage="_CustomerReportFault", ThisKey="FaultCode", OtherKey="MappedFaultType")]
		public EntitySet<CustomerReportFault> CustomerReportFault
		{
			get
			{
				return this._CustomerReportFault;
			}
			set
			{
				this._CustomerReportFault.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FaultType_FixEvent", Storage="_FixEvent", ThisKey="FaultCode", OtherKey="FaultType")]
		public EntitySet<FixEvent> FixEvent
		{
			get
			{
				return this._FixEvent;
			}
			set
			{
				this._FixEvent.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerReportFault(CustomerReportFault entity)
		{
			this.SendPropertyChanging();
			entity.FaultType = this;
		}
		
		private void detach_CustomerReportFault(CustomerReportFault entity)
		{
			this.SendPropertyChanging();
			entity.FaultType = null;
		}
		
		private void attach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.FaultType1 = this;
		}
		
		private void detach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.FaultType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinishDelay")]
	public partial class FinishDelay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Level;
		
		private string _ResponsibleStaffID;
		
		private System.DateTime _DecisionTime;
		
		private System.DateTime _Deadline;
		
		private string _Reason;
		
		private int _FixEventID;
		
		private int _ID;
		
		private EntityRef<FixEvent> _FixEvent;
		
		private EntityRef<Staff> _Staff;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnResponsibleStaffIDChanging(string value);
    partial void OnResponsibleStaffIDChanged();
    partial void OnDecisionTimeChanging(System.DateTime value);
    partial void OnDecisionTimeChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnFixEventIDChanging(int value);
    partial void OnFixEventIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public FinishDelay()
		{
			this._FixEvent = default(EntityRef<FixEvent>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleStaffID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ResponsibleStaffID
		{
			get
			{
				return this._ResponsibleStaffID;
			}
			set
			{
				if ((this._ResponsibleStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponsibleStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleStaffID = value;
					this.SendPropertyChanged("ResponsibleStaffID");
					this.OnResponsibleStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionTime", DbType="DateTime NOT NULL")]
		public System.DateTime DecisionTime
		{
			get
			{
				return this._DecisionTime;
			}
			set
			{
				if ((this._DecisionTime != value))
				{
					this.OnDecisionTimeChanging(value);
					this.SendPropertyChanging();
					this._DecisionTime = value;
					this.SendPropertyChanged("DecisionTime");
					this.OnDecisionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="DateTime NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixEventID", DbType="Int NOT NULL")]
		public int FixEventID
		{
			get
			{
				return this._FixEventID;
			}
			set
			{
				if ((this._FixEventID != value))
				{
					if (this._FixEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixEventIDChanging(value);
					this.SendPropertyChanging();
					this._FixEventID = value;
					this.SendPropertyChanged("FixEventID");
					this.OnFixEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_FinishDelay", Storage="_FixEvent", ThisKey="FixEventID", OtherKey="ID", IsForeignKey=true)]
		public FixEvent FixEvent
		{
			get
			{
				return this._FixEvent.Entity;
			}
			set
			{
				FixEvent previousValue = this._FixEvent.Entity;
				if (((previousValue != value) 
							|| (this._FixEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixEvent.Entity = null;
						previousValue.FinishDelay.Remove(this);
					}
					this._FixEvent.Entity = value;
					if ((value != null))
					{
						value.FinishDelay.Add(this);
						this._FixEventID = value.ID;
					}
					else
					{
						this._FixEventID = default(int);
					}
					this.SendPropertyChanged("FixEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FinishDelay", Storage="_Staff", ThisKey="ResponsibleStaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.FinishDelay.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.FinishDelay.Add(this);
						this._ResponsibleStaffID = value.ID;
					}
					else
					{
						this._ResponsibleStaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixEvent")]
	public partial class FixEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _FaultTime;
		
		private string _FixPlan;
		
		private System.DateTime _DispatchDeadline;
		
		private System.DateTime _FinishDeadline;
		
		private string _InstrumentID;
		
		private System.DateTime _RecentStatusTime;
		
		private System.Nullable<System.DateTime> _AccomplishTime;
		
		private System.Nullable<bool> _Auditted;
		
		private string _Auditor;
		
		private int _InstrumentType;
		
		private string _FaultDetail;
		
		private string _FaultType;
		
		private int _CurrentStatusID;
		
		private EntitySet<DispatchDelay> _DispatchDelay;
		
		private EntitySet<DispatchMission> _DispatchMission;
		
		private EntitySet<FinishDelay> _FinishDelay;
		
		private EntitySet<InstrumentStatusHistory> _InstrumentStatusHistory;
		
		private EntitySet<EventAttachedFile> _EventAttachedFile;
		
		private EntityRef<FaultType> _FaultType1;
		
		private EntityRef<FixStatus> _FixStatus;
		
		private EntityRef<Instrument> _Instrument;
		
		private EntityRef<InstrumentType> _InstrumentType1;
		
		private EntityRef<Staff> _Staff;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFaultTimeChanging(System.DateTime value);
    partial void OnFaultTimeChanged();
    partial void OnFixPlanChanging(string value);
    partial void OnFixPlanChanged();
    partial void OnDispatchDeadlineChanging(System.DateTime value);
    partial void OnDispatchDeadlineChanged();
    partial void OnFinishDeadlineChanging(System.DateTime value);
    partial void OnFinishDeadlineChanged();
    partial void OnInstrumentIDChanging(string value);
    partial void OnInstrumentIDChanged();
    partial void OnRecentStatusTimeChanging(System.DateTime value);
    partial void OnRecentStatusTimeChanged();
    partial void OnAccomplishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAccomplishTimeChanged();
    partial void OnAudittedChanging(System.Nullable<bool> value);
    partial void OnAudittedChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnInstrumentTypeChanging(int value);
    partial void OnInstrumentTypeChanged();
    partial void OnFaultDetailChanging(string value);
    partial void OnFaultDetailChanged();
    partial void OnFaultTypeChanging(string value);
    partial void OnFaultTypeChanged();
    partial void OnCurrentStatusIDChanging(int value);
    partial void OnCurrentStatusIDChanged();
    #endregion
		
		public FixEvent()
		{
			this._DispatchDelay = new EntitySet<DispatchDelay>(new Action<DispatchDelay>(this.attach_DispatchDelay), new Action<DispatchDelay>(this.detach_DispatchDelay));
			this._DispatchMission = new EntitySet<DispatchMission>(new Action<DispatchMission>(this.attach_DispatchMission), new Action<DispatchMission>(this.detach_DispatchMission));
			this._FinishDelay = new EntitySet<FinishDelay>(new Action<FinishDelay>(this.attach_FinishDelay), new Action<FinishDelay>(this.detach_FinishDelay));
			this._InstrumentStatusHistory = new EntitySet<InstrumentStatusHistory>(new Action<InstrumentStatusHistory>(this.attach_InstrumentStatusHistory), new Action<InstrumentStatusHistory>(this.detach_InstrumentStatusHistory));
			this._EventAttachedFile = new EntitySet<EventAttachedFile>(new Action<EventAttachedFile>(this.attach_EventAttachedFile), new Action<EventAttachedFile>(this.detach_EventAttachedFile));
			this._FaultType1 = default(EntityRef<FaultType>);
			this._FixStatus = default(EntityRef<FixStatus>);
			this._Instrument = default(EntityRef<Instrument>);
			this._InstrumentType1 = default(EntityRef<InstrumentType>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaultTime", DbType="DateTime NOT NULL")]
		public System.DateTime FaultTime
		{
			get
			{
				return this._FaultTime;
			}
			set
			{
				if ((this._FaultTime != value))
				{
					this.OnFaultTimeChanging(value);
					this.SendPropertyChanging();
					this._FaultTime = value;
					this.SendPropertyChanged("FaultTime");
					this.OnFaultTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixPlan", DbType="NVarChar(200)")]
		public string FixPlan
		{
			get
			{
				return this._FixPlan;
			}
			set
			{
				if ((this._FixPlan != value))
				{
					this.OnFixPlanChanging(value);
					this.SendPropertyChanging();
					this._FixPlan = value;
					this.SendPropertyChanged("FixPlan");
					this.OnFixPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchDeadline", DbType="DateTime NOT NULL")]
		public System.DateTime DispatchDeadline
		{
			get
			{
				return this._DispatchDeadline;
			}
			set
			{
				if ((this._DispatchDeadline != value))
				{
					this.OnDispatchDeadlineChanging(value);
					this.SendPropertyChanging();
					this._DispatchDeadline = value;
					this.SendPropertyChanged("DispatchDeadline");
					this.OnDispatchDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDeadline", DbType="DateTime NOT NULL")]
		public System.DateTime FinishDeadline
		{
			get
			{
				return this._FinishDeadline;
			}
			set
			{
				if ((this._FinishDeadline != value))
				{
					this.OnFinishDeadlineChanging(value);
					this.SendPropertyChanging();
					this._FinishDeadline = value;
					this.SendPropertyChanged("FinishDeadline");
					this.OnFinishDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentID", DbType="NVarChar(50)")]
		public string InstrumentID
		{
			get
			{
				return this._InstrumentID;
			}
			set
			{
				if ((this._InstrumentID != value))
				{
					if (this._Instrument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstrumentIDChanging(value);
					this.SendPropertyChanging();
					this._InstrumentID = value;
					this.SendPropertyChanged("InstrumentID");
					this.OnInstrumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecentStatusTime", DbType="DateTime NOT NULL")]
		public System.DateTime RecentStatusTime
		{
			get
			{
				return this._RecentStatusTime;
			}
			set
			{
				if ((this._RecentStatusTime != value))
				{
					this.OnRecentStatusTimeChanging(value);
					this.SendPropertyChanging();
					this._RecentStatusTime = value;
					this.SendPropertyChanged("RecentStatusTime");
					this.OnRecentStatusTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccomplishTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AccomplishTime
		{
			get
			{
				return this._AccomplishTime;
			}
			set
			{
				if ((this._AccomplishTime != value))
				{
					this.OnAccomplishTimeChanging(value);
					this.SendPropertyChanging();
					this._AccomplishTime = value;
					this.SendPropertyChanged("AccomplishTime");
					this.OnAccomplishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Auditted", DbType="Bit")]
		public System.Nullable<bool> Auditted
		{
			get
			{
				return this._Auditted;
			}
			set
			{
				if ((this._Auditted != value))
				{
					this.OnAudittedChanging(value);
					this.SendPropertyChanging();
					this._Auditted = value;
					this.SendPropertyChanged("Auditted");
					this.OnAudittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Auditor", DbType="NVarChar(20)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentType", DbType="Int NOT NULL")]
		public int InstrumentType
		{
			get
			{
				return this._InstrumentType;
			}
			set
			{
				if ((this._InstrumentType != value))
				{
					if (this._InstrumentType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstrumentTypeChanging(value);
					this.SendPropertyChanging();
					this._InstrumentType = value;
					this.SendPropertyChanged("InstrumentType");
					this.OnInstrumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaultDetail", DbType="NVarChar(200)")]
		public string FaultDetail
		{
			get
			{
				return this._FaultDetail;
			}
			set
			{
				if ((this._FaultDetail != value))
				{
					this.OnFaultDetailChanging(value);
					this.SendPropertyChanging();
					this._FaultDetail = value;
					this.SendPropertyChanged("FaultDetail");
					this.OnFaultDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaultType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string FaultType
		{
			get
			{
				return this._FaultType;
			}
			set
			{
				if ((this._FaultType != value))
				{
					if (this._FaultType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFaultTypeChanging(value);
					this.SendPropertyChanging();
					this._FaultType = value;
					this.SendPropertyChanged("FaultType");
					this.OnFaultTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStatusID", DbType="Int NOT NULL")]
		public int CurrentStatusID
		{
			get
			{
				return this._CurrentStatusID;
			}
			set
			{
				if ((this._CurrentStatusID != value))
				{
					if (this._FixStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentStatusID = value;
					this.SendPropertyChanged("CurrentStatusID");
					this.OnCurrentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_DispatchDelay", Storage="_DispatchDelay", ThisKey="ID", OtherKey="FixEventID")]
		public EntitySet<DispatchDelay> DispatchDelay
		{
			get
			{
				return this._DispatchDelay;
			}
			set
			{
				this._DispatchDelay.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_DispatchMission", Storage="_DispatchMission", ThisKey="ID", OtherKey="FixEventID")]
		public EntitySet<DispatchMission> DispatchMission
		{
			get
			{
				return this._DispatchMission;
			}
			set
			{
				this._DispatchMission.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_FinishDelay", Storage="_FinishDelay", ThisKey="ID", OtherKey="FixEventID")]
		public EntitySet<FinishDelay> FinishDelay
		{
			get
			{
				return this._FinishDelay;
			}
			set
			{
				this._FinishDelay.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_InstrumentStatusHistory", Storage="_InstrumentStatusHistory", ThisKey="ID", OtherKey="FixEventID")]
		public EntitySet<InstrumentStatusHistory> InstrumentStatusHistory
		{
			get
			{
				return this._InstrumentStatusHistory;
			}
			set
			{
				this._InstrumentStatusHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_EventAttachedFile", Storage="_EventAttachedFile", ThisKey="ID", OtherKey="FixEventID")]
		public EntitySet<EventAttachedFile> EventAttachedFile
		{
			get
			{
				return this._EventAttachedFile;
			}
			set
			{
				this._EventAttachedFile.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FaultType_FixEvent", Storage="_FaultType1", ThisKey="FaultType", OtherKey="FaultCode", IsForeignKey=true)]
		public FaultType FaultType1
		{
			get
			{
				return this._FaultType1.Entity;
			}
			set
			{
				FaultType previousValue = this._FaultType1.Entity;
				if (((previousValue != value) 
							|| (this._FaultType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FaultType1.Entity = null;
						previousValue.FixEvent.Remove(this);
					}
					this._FaultType1.Entity = value;
					if ((value != null))
					{
						value.FixEvent.Add(this);
						this._FaultType = value.FaultCode;
					}
					else
					{
						this._FaultType = default(string);
					}
					this.SendPropertyChanged("FaultType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixStatus_FixEvent", Storage="_FixStatus", ThisKey="CurrentStatusID", OtherKey="ID", IsForeignKey=true)]
		public FixStatus FixStatus
		{
			get
			{
				return this._FixStatus.Entity;
			}
			set
			{
				FixStatus previousValue = this._FixStatus.Entity;
				if (((previousValue != value) 
							|| (this._FixStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixStatus.Entity = null;
						previousValue.FixEvent.Remove(this);
					}
					this._FixStatus.Entity = value;
					if ((value != null))
					{
						value.FixEvent.Add(this);
						this._CurrentStatusID = value.ID;
					}
					else
					{
						this._CurrentStatusID = default(int);
					}
					this.SendPropertyChanged("FixStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_FixEvent", Storage="_Instrument", ThisKey="InstrumentID", OtherKey="GUID", IsForeignKey=true)]
		public Instrument Instrument
		{
			get
			{
				return this._Instrument.Entity;
			}
			set
			{
				Instrument previousValue = this._Instrument.Entity;
				if (((previousValue != value) 
							|| (this._Instrument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instrument.Entity = null;
						previousValue.FixEvent.Remove(this);
					}
					this._Instrument.Entity = value;
					if ((value != null))
					{
						value.FixEvent.Add(this);
						this._InstrumentID = value.GUID;
					}
					else
					{
						this._InstrumentID = default(string);
					}
					this.SendPropertyChanged("Instrument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_FixEvent", Storage="_InstrumentType1", ThisKey="InstrumentType", OtherKey="ID", IsForeignKey=true)]
		public InstrumentType InstrumentType1
		{
			get
			{
				return this._InstrumentType1.Entity;
			}
			set
			{
				InstrumentType previousValue = this._InstrumentType1.Entity;
				if (((previousValue != value) 
							|| (this._InstrumentType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstrumentType1.Entity = null;
						previousValue.FixEvent.Remove(this);
					}
					this._InstrumentType1.Entity = value;
					if ((value != null))
					{
						value.FixEvent.Add(this);
						this._InstrumentType = value.ID;
					}
					else
					{
						this._InstrumentType = default(int);
					}
					this.SendPropertyChanged("InstrumentType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FixEvent", Storage="_Staff", ThisKey="Auditor", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.FixEvent.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.FixEvent.Add(this);
						this._Auditor = value.ID;
					}
					else
					{
						this._Auditor = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DispatchDelay(DispatchDelay entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = this;
		}
		
		private void detach_DispatchDelay(DispatchDelay entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = null;
		}
		
		private void attach_DispatchMission(DispatchMission entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = this;
		}
		
		private void detach_DispatchMission(DispatchMission entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = null;
		}
		
		private void attach_FinishDelay(FinishDelay entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = this;
		}
		
		private void detach_FinishDelay(FinishDelay entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = null;
		}
		
		private void attach_InstrumentStatusHistory(InstrumentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = this;
		}
		
		private void detach_InstrumentStatusHistory(InstrumentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = null;
		}
		
		private void attach_EventAttachedFile(EventAttachedFile entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = this;
		}
		
		private void detach_EventAttachedFile(EventAttachedFile entity)
		{
			this.SendPropertyChanging();
			entity.FixEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixStatus")]
	public partial class FixStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<FixEvent> _FixEvent;
		
		private EntitySet<InstrumentStatusHistory> _InstrumentStatusHistory;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FixStatus()
		{
			this._FixEvent = new EntitySet<FixEvent>(new Action<FixEvent>(this.attach_FixEvent), new Action<FixEvent>(this.detach_FixEvent));
			this._InstrumentStatusHistory = new EntitySet<InstrumentStatusHistory>(new Action<InstrumentStatusHistory>(this.attach_InstrumentStatusHistory), new Action<InstrumentStatusHistory>(this.detach_InstrumentStatusHistory));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixStatus_FixEvent", Storage="_FixEvent", ThisKey="ID", OtherKey="CurrentStatusID")]
		public EntitySet<FixEvent> FixEvent
		{
			get
			{
				return this._FixEvent;
			}
			set
			{
				this._FixEvent.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixStatus_InstrumentStatusHistory", Storage="_InstrumentStatusHistory", ThisKey="ID", OtherKey="StatusID")]
		public EntitySet<InstrumentStatusHistory> InstrumentStatusHistory
		{
			get
			{
				return this._InstrumentStatusHistory;
			}
			set
			{
				this._InstrumentStatusHistory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.FixStatus = this;
		}
		
		private void detach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.FixStatus = null;
		}
		
		private void attach_InstrumentStatusHistory(InstrumentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.FixStatus = this;
		}
		
		private void detach_InstrumentStatusHistory(InstrumentStatusHistory entity)
		{
			this.SendPropertyChanging();
			entity.FixStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instrument")]
	public partial class Instrument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GUID;
		
		private string _ProjectID;
		
		private string _Location;
		
		private int _Type;
		
		private string _Model;
		
		private System.DateTime _ProducedTime;
		
		private bool _IsOnline;
		
		private int _DeliveryStatusID;
		
		private int _CurrentFaultCount;
		
		private string _Remarks;
		
		private System.Nullable<System.DateTime> _LastUpdateTime;
		
		private EntitySet<FixEvent> _FixEvent;
		
		private EntitySet<StaffDuty> _StaffDuty;
		
		private EntityRef<DeliveryStatus> _DeliveryStatus;
		
		private EntityRef<InstrumentType> _InstrumentType;
		
		private EntityRef<Project> _Project;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnProducedTimeChanging(System.DateTime value);
    partial void OnProducedTimeChanged();
    partial void OnIsOnlineChanging(bool value);
    partial void OnIsOnlineChanged();
    partial void OnDeliveryStatusIDChanging(int value);
    partial void OnDeliveryStatusIDChanged();
    partial void OnCurrentFaultCountChanging(int value);
    partial void OnCurrentFaultCountChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnLastUpdateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateTimeChanged();
    #endregion
		
		public Instrument()
		{
			this._FixEvent = new EntitySet<FixEvent>(new Action<FixEvent>(this.attach_FixEvent), new Action<FixEvent>(this.detach_FixEvent));
			this._StaffDuty = new EntitySet<StaffDuty>(new Action<StaffDuty>(this.attach_StaffDuty), new Action<StaffDuty>(this.detach_StaffDuty));
			this._DeliveryStatus = default(EntityRef<DeliveryStatus>);
			this._InstrumentType = default(EntityRef<InstrumentType>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="NVarChar(20)")]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._InstrumentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(20)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProducedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ProducedTime
		{
			get
			{
				return this._ProducedTime;
			}
			set
			{
				if ((this._ProducedTime != value))
				{
					this.OnProducedTimeChanging(value);
					this.SendPropertyChanging();
					this._ProducedTime = value;
					this.SendPropertyChanged("ProducedTime");
					this.OnProducedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnline", DbType="Bit NOT NULL")]
		public bool IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryStatusID", DbType="Int NOT NULL")]
		public int DeliveryStatusID
		{
			get
			{
				return this._DeliveryStatusID;
			}
			set
			{
				if ((this._DeliveryStatusID != value))
				{
					if (this._DeliveryStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryStatusID = value;
					this.SendPropertyChanged("DeliveryStatusID");
					this.OnDeliveryStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentFaultCount", DbType="Int NOT NULL")]
		public int CurrentFaultCount
		{
			get
			{
				return this._CurrentFaultCount;
			}
			set
			{
				if ((this._CurrentFaultCount != value))
				{
					this.OnCurrentFaultCountChanging(value);
					this.SendPropertyChanging();
					this._CurrentFaultCount = value;
					this.SendPropertyChanged("CurrentFaultCount");
					this.OnCurrentFaultCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateTime
		{
			get
			{
				return this._LastUpdateTime;
			}
			set
			{
				if ((this._LastUpdateTime != value))
				{
					this.OnLastUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateTime = value;
					this.SendPropertyChanged("LastUpdateTime");
					this.OnLastUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_FixEvent", Storage="_FixEvent", ThisKey="GUID", OtherKey="InstrumentID")]
		public EntitySet<FixEvent> FixEvent
		{
			get
			{
				return this._FixEvent;
			}
			set
			{
				this._FixEvent.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_StaffDuty", Storage="_StaffDuty", ThisKey="GUID", OtherKey="InstrumentID")]
		public EntitySet<StaffDuty> StaffDuty
		{
			get
			{
				return this._StaffDuty;
			}
			set
			{
				this._StaffDuty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryStatus_Instrument", Storage="_DeliveryStatus", ThisKey="DeliveryStatusID", OtherKey="ID", IsForeignKey=true)]
		public DeliveryStatus DeliveryStatus
		{
			get
			{
				return this._DeliveryStatus.Entity;
			}
			set
			{
				DeliveryStatus previousValue = this._DeliveryStatus.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryStatus.Entity = null;
						previousValue.Instrument.Remove(this);
					}
					this._DeliveryStatus.Entity = value;
					if ((value != null))
					{
						value.Instrument.Add(this);
						this._DeliveryStatusID = value.ID;
					}
					else
					{
						this._DeliveryStatusID = default(int);
					}
					this.SendPropertyChanged("DeliveryStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_Instrument", Storage="_InstrumentType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public InstrumentType InstrumentType
		{
			get
			{
				return this._InstrumentType.Entity;
			}
			set
			{
				InstrumentType previousValue = this._InstrumentType.Entity;
				if (((previousValue != value) 
							|| (this._InstrumentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InstrumentType.Entity = null;
						previousValue.Instrument.Remove(this);
					}
					this._InstrumentType.Entity = value;
					if ((value != null))
					{
						value.Instrument.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("InstrumentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Instrument", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Instrument.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Instrument.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = this;
		}
		
		private void detach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = null;
		}
		
		private void attach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = this;
		}
		
		private void detach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstrumentStatusHistory")]
	public partial class InstrumentStatusHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FixEventID;
		
		private System.DateTime _StatusChangeTime;
		
		private int _StatusID;
		
		private int _ID;
		
		private EntityRef<FixEvent> _FixEvent;
		
		private EntityRef<FixStatus> _FixStatus;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFixEventIDChanging(int value);
    partial void OnFixEventIDChanged();
    partial void OnStatusChangeTimeChanging(System.DateTime value);
    partial void OnStatusChangeTimeChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public InstrumentStatusHistory()
		{
			this._FixEvent = default(EntityRef<FixEvent>);
			this._FixStatus = default(EntityRef<FixStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixEventID", DbType="Int NOT NULL")]
		public int FixEventID
		{
			get
			{
				return this._FixEventID;
			}
			set
			{
				if ((this._FixEventID != value))
				{
					if (this._FixEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixEventIDChanging(value);
					this.SendPropertyChanging();
					this._FixEventID = value;
					this.SendPropertyChanged("FixEventID");
					this.OnFixEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusChangeTime", DbType="DateTime NOT NULL")]
		public System.DateTime StatusChangeTime
		{
			get
			{
				return this._StatusChangeTime;
			}
			set
			{
				if ((this._StatusChangeTime != value))
				{
					this.OnStatusChangeTimeChanging(value);
					this.SendPropertyChanging();
					this._StatusChangeTime = value;
					this.SendPropertyChanged("StatusChangeTime");
					this.OnStatusChangeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._FixStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_InstrumentStatusHistory", Storage="_FixEvent", ThisKey="FixEventID", OtherKey="ID", IsForeignKey=true)]
		public FixEvent FixEvent
		{
			get
			{
				return this._FixEvent.Entity;
			}
			set
			{
				FixEvent previousValue = this._FixEvent.Entity;
				if (((previousValue != value) 
							|| (this._FixEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixEvent.Entity = null;
						previousValue.InstrumentStatusHistory.Remove(this);
					}
					this._FixEvent.Entity = value;
					if ((value != null))
					{
						value.InstrumentStatusHistory.Add(this);
						this._FixEventID = value.ID;
					}
					else
					{
						this._FixEventID = default(int);
					}
					this.SendPropertyChanged("FixEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixStatus_InstrumentStatusHistory", Storage="_FixStatus", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
		public FixStatus FixStatus
		{
			get
			{
				return this._FixStatus.Entity;
			}
			set
			{
				FixStatus previousValue = this._FixStatus.Entity;
				if (((previousValue != value) 
							|| (this._FixStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixStatus.Entity = null;
						previousValue.InstrumentStatusHistory.Remove(this);
					}
					this._FixStatus.Entity = value;
					if ((value != null))
					{
						value.InstrumentStatusHistory.Add(this);
						this._StatusID = value.ID;
					}
					else
					{
						this._StatusID = default(int);
					}
					this.SendPropertyChanged("FixStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstrumentType")]
	public partial class InstrumentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
		private EntitySet<FixEvent> _FixEvent;
		
		private EntitySet<Instrument> _Instrument;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public InstrumentType()
		{
			this._FixEvent = new EntitySet<FixEvent>(new Action<FixEvent>(this.attach_FixEvent), new Action<FixEvent>(this.detach_FixEvent));
			this._Instrument = new EntitySet<Instrument>(new Action<Instrument>(this.attach_Instrument), new Action<Instrument>(this.detach_Instrument));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_FixEvent", Storage="_FixEvent", ThisKey="ID", OtherKey="InstrumentType")]
		public EntitySet<FixEvent> FixEvent
		{
			get
			{
				return this._FixEvent;
			}
			set
			{
				this._FixEvent.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InstrumentType_Instrument", Storage="_Instrument", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Instrument> Instrument
		{
			get
			{
				return this._Instrument;
			}
			set
			{
				this._Instrument.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType1 = this;
		}
		
		private void detach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType1 = null;
		}
		
		private void attach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType = this;
		}
		
		private void detach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.InstrumentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Client;
		
		private string _Address;
		
		private string _SalesManagerID;
		
		private string _ProjectManagerID;
		
		private string _Remarks;
		
		private System.Nullable<System.DateTime> _DeliveryTime;
		
		private EntitySet<CustomerReportFault> _CustomerReportFault;
		
		private EntitySet<TransitServer> _TransitServer;
		
		private EntitySet<Instrument> _Instrument;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientChanging(string value);
    partial void OnClientChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSalesManagerIDChanging(string value);
    partial void OnSalesManagerIDChanged();
    partial void OnProjectManagerIDChanging(string value);
    partial void OnProjectManagerIDChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnDeliveryTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryTimeChanged();
    #endregion
		
		public Project()
		{
			this._CustomerReportFault = new EntitySet<CustomerReportFault>(new Action<CustomerReportFault>(this.attach_CustomerReportFault), new Action<CustomerReportFault>(this.detach_CustomerReportFault));
			this._TransitServer = new EntitySet<TransitServer>(new Action<TransitServer>(this.attach_TransitServer), new Action<TransitServer>(this.detach_TransitServer));
			this._Instrument = new EntitySet<Instrument>(new Action<Instrument>(this.attach_Instrument), new Action<Instrument>(this.detach_Instrument));
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this.OnClientChanging(value);
					this.SendPropertyChanging();
					this._Client = value;
					this.SendPropertyChanged("Client");
					this.OnClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesManagerID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string SalesManagerID
		{
			get
			{
				return this._SalesManagerID;
			}
			set
			{
				if ((this._SalesManagerID != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesManagerIDChanging(value);
					this.SendPropertyChanging();
					this._SalesManagerID = value;
					this.SendPropertyChanged("SalesManagerID");
					this.OnSalesManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectManagerID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ProjectManagerID
		{
			get
			{
				return this._ProjectManagerID;
			}
			set
			{
				if ((this._ProjectManagerID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectManagerID = value;
					this.SendPropertyChanged("ProjectManagerID");
					this.OnProjectManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryTime
		{
			get
			{
				return this._DeliveryTime;
			}
			set
			{
				if ((this._DeliveryTime != value))
				{
					this.OnDeliveryTimeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryTime = value;
					this.SendPropertyChanged("DeliveryTime");
					this.OnDeliveryTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CustomerReportFault", Storage="_CustomerReportFault", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<CustomerReportFault> CustomerReportFault
		{
			get
			{
				return this._CustomerReportFault;
			}
			set
			{
				this._CustomerReportFault.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TransitServer", Storage="_TransitServer", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<TransitServer> TransitServer
		{
			get
			{
				return this._TransitServer;
			}
			set
			{
				this._TransitServer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Instrument", Storage="_Instrument", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Instrument> Instrument
		{
			get
			{
				return this._Instrument;
			}
			set
			{
				this._Instrument.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Project", Storage="_Staff", ThisKey="ProjectManagerID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Project.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Project.Add(this);
						this._ProjectManagerID = value.ID;
					}
					else
					{
						this._ProjectManagerID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Project1", Storage="_Staff1", ThisKey="SalesManagerID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Project1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Project1.Add(this);
						this._SalesManagerID = value.ID;
					}
					else
					{
						this._SalesManagerID = default(string);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerReportFault(CustomerReportFault entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_CustomerReportFault(CustomerReportFault entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TransitServer(TransitServer entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TransitServer(TransitServer entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Instrument(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private int _DepartmentID;
		
		private string _Mobile;
		
		private string _Phone;
		
		private EntitySet<DispatchDelay> _DispatchDelay;
		
		private EntitySet<FinishDelay> _FinishDelay;
		
		private EntitySet<FixEvent> _FixEvent;
		
		private EntitySet<Project> _Project;
		
		private EntitySet<Project> _Project1;
		
		private EntitySet<StaffDuty> _StaffDuty;
		
		private EntityRef<Department> _Department;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Staff()
		{
			this._DispatchDelay = new EntitySet<DispatchDelay>(new Action<DispatchDelay>(this.attach_DispatchDelay), new Action<DispatchDelay>(this.detach_DispatchDelay));
			this._FinishDelay = new EntitySet<FinishDelay>(new Action<FinishDelay>(this.attach_FinishDelay), new Action<FinishDelay>(this.detach_FinishDelay));
			this._FixEvent = new EntitySet<FixEvent>(new Action<FixEvent>(this.attach_FixEvent), new Action<FixEvent>(this.detach_FixEvent));
			this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
			this._Project1 = new EntitySet<Project>(new Action<Project>(this.attach_Project1), new Action<Project>(this.detach_Project1));
			this._StaffDuty = new EntitySet<StaffDuty>(new Action<StaffDuty>(this.attach_StaffDuty), new Action<StaffDuty>(this.detach_StaffDuty));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(20)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DispatchDelay", Storage="_DispatchDelay", ThisKey="ID", OtherKey="ResponsibleStaffID")]
		public EntitySet<DispatchDelay> DispatchDelay
		{
			get
			{
				return this._DispatchDelay;
			}
			set
			{
				this._DispatchDelay.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FinishDelay", Storage="_FinishDelay", ThisKey="ID", OtherKey="ResponsibleStaffID")]
		public EntitySet<FinishDelay> FinishDelay
		{
			get
			{
				return this._FinishDelay;
			}
			set
			{
				this._FinishDelay.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FixEvent", Storage="_FixEvent", ThisKey="ID", OtherKey="Auditor")]
		public EntitySet<FixEvent> FixEvent
		{
			get
			{
				return this._FixEvent;
			}
			set
			{
				this._FixEvent.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Project", Storage="_Project", ThisKey="ID", OtherKey="ProjectManagerID")]
		public EntitySet<Project> Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				this._Project.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Project1", Storage="_Project1", ThisKey="ID", OtherKey="SalesManagerID")]
		public EntitySet<Project> Project1
		{
			get
			{
				return this._Project1;
			}
			set
			{
				this._Project1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffDuty", Storage="_StaffDuty", ThisKey="ID", OtherKey="StaffID")]
		public EntitySet<StaffDuty> StaffDuty
		{
			get
			{
				return this._StaffDuty;
			}
			set
			{
				this._StaffDuty.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Department", ThisKey="DepartmentID", OtherKey="ID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Staff.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Staff.Add(this);
						this._DepartmentID = value.ID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DispatchDelay(DispatchDelay entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DispatchDelay(DispatchDelay entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_FinishDelay(FinishDelay entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_FinishDelay(FinishDelay entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_FixEvent(FixEvent entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Project1(Project entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Project1(Project entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_StaffDuty(StaffDuty entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffDuty")]
	public partial class StaffDuty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private int _DutyID;
		
		private int _ID;
		
		private string _InstrumentID;
		
		private EntityRef<Duty> _Duty;
		
		private EntityRef<Instrument> _Instrument;
		
		private EntityRef<Staff> _Staff;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnDutyIDChanging(int value);
    partial void OnDutyIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInstrumentIDChanging(string value);
    partial void OnInstrumentIDChanged();
    #endregion
		
		public StaffDuty()
		{
			this._Duty = default(EntityRef<Duty>);
			this._Instrument = default(EntityRef<Instrument>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DutyID", DbType="Int NOT NULL")]
		public int DutyID
		{
			get
			{
				return this._DutyID;
			}
			set
			{
				if ((this._DutyID != value))
				{
					if (this._Duty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDutyIDChanging(value);
					this.SendPropertyChanging();
					this._DutyID = value;
					this.SendPropertyChanged("DutyID");
					this.OnDutyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string InstrumentID
		{
			get
			{
				return this._InstrumentID;
			}
			set
			{
				if ((this._InstrumentID != value))
				{
					if (this._Instrument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstrumentIDChanging(value);
					this.SendPropertyChanging();
					this._InstrumentID = value;
					this.SendPropertyChanged("InstrumentID");
					this.OnInstrumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Duty_StaffDuty", Storage="_Duty", ThisKey="DutyID", OtherKey="ID", IsForeignKey=true)]
		public Duty Duty
		{
			get
			{
				return this._Duty.Entity;
			}
			set
			{
				Duty previousValue = this._Duty.Entity;
				if (((previousValue != value) 
							|| (this._Duty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Duty.Entity = null;
						previousValue.StaffDuty.Remove(this);
					}
					this._Duty.Entity = value;
					if ((value != null))
					{
						value.StaffDuty.Add(this);
						this._DutyID = value.ID;
					}
					else
					{
						this._DutyID = default(int);
					}
					this.SendPropertyChanged("Duty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_StaffDuty", Storage="_Instrument", ThisKey="InstrumentID", OtherKey="GUID", IsForeignKey=true)]
		public Instrument Instrument
		{
			get
			{
				return this._Instrument.Entity;
			}
			set
			{
				Instrument previousValue = this._Instrument.Entity;
				if (((previousValue != value) 
							|| (this._Instrument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instrument.Entity = null;
						previousValue.StaffDuty.Remove(this);
					}
					this._Instrument.Entity = value;
					if ((value != null))
					{
						value.StaffDuty.Add(this);
						this._InstrumentID = value.GUID;
					}
					else
					{
						this._InstrumentID = default(string);
					}
					this.SendPropertyChanged("Instrument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_StaffDuty", Storage="_Staff", ThisKey="StaffID", OtherKey="ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffDuty.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffDuty.Add(this);
						this._StaffID = value.ID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventAttachedFile")]
	public partial class EventAttachedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private int _FixEventID;
		
		private System.DateTime _UploadTime;
		
		private string _FileName;
		
		private EntityRef<FixEvent> _FixEvent;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnFixEventIDChanging(int value);
    partial void OnFixEventIDChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public EventAttachedFile()
		{
			this._FixEvent = default(EntityRef<FixEvent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixEventID", DbType="Int NOT NULL")]
		public int FixEventID
		{
			get
			{
				return this._FixEventID;
			}
			set
			{
				if ((this._FixEventID != value))
				{
					if (this._FixEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixEventIDChanging(value);
					this.SendPropertyChanging();
					this._FixEventID = value;
					this.SendPropertyChanged("FixEventID");
					this.OnFixEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixEvent_EventAttachedFile", Storage="_FixEvent", ThisKey="FixEventID", OtherKey="ID", IsForeignKey=true)]
		public FixEvent FixEvent
		{
			get
			{
				return this._FixEvent.Entity;
			}
			set
			{
				FixEvent previousValue = this._FixEvent.Entity;
				if (((previousValue != value) 
							|| (this._FixEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixEvent.Entity = null;
						previousValue.EventAttachedFile.Remove(this);
					}
					this._FixEvent.Entity = value;
					if ((value != null))
					{
						value.EventAttachedFile.Add(this);
						this._FixEventID = value.ID;
					}
					else
					{
						this._FixEventID = default(int);
					}
					this.SendPropertyChanged("FixEvent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
